{"version":3,"sources":["reducer/TaskReducer.ts","ApiTodolists/ApiTodolist.ts","reducer/AppReducer.ts","reducer/TodoListReducer.ts","reducer/AuthReducer.ts","components/AppBar.tsx","components/LinearProgress.tsx","components/AddItemForm.tsx","Selectors/Selectors.ts","components/Button.tsx","components/EditableSpan.tsx","components/Task.tsx","TodoList.tsx","components/TodolistDemo.tsx","components/Routes/PrivateRouter.tsx","components/AuthLogin/AuthLogin.tsx","components/Routes/Routes.tsx","components/ErrorAlert.tsx","components/Load/Load.tsx","App.tsx","serviceWorker.ts","reducerRedux/ReducerRedux.tsx","index.tsx"],"names":["TaskStatus","TaskPriorities","initial","axios","create","withCredentials","headers","baseURL","todolistsAPI","get","title","post","todolistId","delete","todolistID","put","taskId","module","authInitialisationAPI","logInForm","ResultCodeType","initialization","removeTaskAC","type","addTaskAC","task","updateTaskAC","TaskId","changeTaskEntityStatusAC","entityStatus","updateTaskTC","dispatch","a","isLoadAC","description","status","priority","startDate","deadline","todoListId","id","data","item","messages","resultCode","removeTodolistAC","changeTodolistTitleAC","changeTodolistEntityStatusAC","createTodolistTC","todolistTitle","OK","todolist","isErrorAC","initialState","error","dataForm","email","login","authMe","spinner","payload","isInitializationAC","isInitializationTC","todolists","forEach","el","items","totalCount","tasks","isLoggedIn","MenuAppBar","isAuth","useSelector","state","app","useDispatch","Box","sx","flexGrow","FormGroup","FormControlLabel","control","Switch","checked","onChange","isLogIn","aria-label","label","AppBar","position","Toolbar","style","justifyContent","display","alignItems","IconButton","size","edge","color","Typography","variant","aria-controls","aria-haspopup","Avatar","alt","src","LinearIndeterminate","isLoad","height","width","LinearProgress","AddItemForm","React","memo","callBack","todolistStatus","useState","setTitle","setError","addTask","newTitle","trim","TextField","value","e","currentTarget","onKeyPress","charCode","Fab","onClick","disabled","Add","todolistsState","ButtonBody","props","changeColorButton","name","filter","Button","endIcon","Send","EditableSpan","spanTitle","changeTitle","setChangeTitle","activeChangeMode","callback","onBlur","key","autoFocus","onDoubleClick","Tasks","onClickHandler","onChangeHandler","changeTaskTitleHandler","className","Completed","newIsDoneValue","New","Delete","fontSize","Todolist","taskForRender","t","removeTask","useCallback","deleteTaskTC","createTaskTC","changeFilter","changeTadoListAC","changeTodolistTitle","updateTodolistTC","removeTodolist","deleteTodolistTC","removeTodolistHandler","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","addTaskHandler","changeTodolistTitleHandler","listStyleType","map","TodolistDemo","addTodolist","todolistsComponents","tl","Grid","Paper","elevation","padding","container","margin","spacing","PrivateRouter","children","to","AuthLogin","authLogin","formik","useFormik","initialValues","password","rememberMe","validate","values","errors","test","onSubmit","PATH","TODOLIST","marginTop","handleSubmit","FormControl","FormLabel","flexDirection","backgroundColor","marginBottom","component","touched","getFieldProps","autoComplete","Checkbox","LOGIN","RoutesBlock","path","element","ErrorAlert","errorStatus","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","Alert","severity","IsLoad","minHeight","CircularProgress","App","isSpinner","useEffect","Container","fixed","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","b","auth","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"iKAUYA,EAMAC,E,6MCoBNC,E,OAAUC,EAAMC,OACrB,CACAC,iBAAiB,EACjBC,QAAS,CACR,UAAW,wCAEZC,QAAQ,kDAIIC,EAAe,WAE1B,OAAON,EAAQO,IAA8B,aAAa,KAF/CD,EAAe,SAIZE,GACd,OAAOR,EAAQS,KAAkD,aAAc,CAACD,SAAQ,KAL7EF,EAAe,SAOZI,GACd,OAAOV,EAAQW,OAAR,qBAAoDD,GAAe,KAR/DJ,EAAe,SAUZM,EAAkBJ,GAChC,OAAOR,EAAQa,IAAR,qBAAiDD,GAAa,CAACJ,SAAS,KAXpEF,EAAe,SAalBI,GACR,OAAOV,EAAQO,IAAR,qBAAyCG,EAAzC,UAA8D,KAd1DJ,EAAe,SAgBhBI,EAAkBF,GAC5B,OAAOR,EAAQS,KAAR,qBAA+DC,EAA/D,UAAoF,CAACF,SAAO,KAjBxFF,EAAe,SAmBhBI,EAAkBI,GAC5B,OAAOd,EAAQW,OAAR,qBAAoDD,EAApD,kBAAwEI,GAAW,KApB/ER,EAAe,SAsBhBM,EAAkBE,EAAcC,GAC1C,OAAOf,EAAQa,IAAR,qBAA8DD,EAA9D,kBAAkFE,GAAlF,eAA+FC,GAAU,KAGrGC,EAAwB,WAEnC,OAAOhB,EAAQO,IAAoC,WAAY,KAFpDS,EAAwB,SAI9BC,GACL,OAAOjB,EAAQS,KAA4C,cAApD,eAAuEQ,GAAY,KAL/ED,EAAwB,WAQnC,OAAOhB,EAAQW,OAA8B,cAAe,K,0BDtElDb,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KAwBZ,IElCYmB,EFkCNC,EAAgC,GAuDzBC,EAAe,SAACN,EAAgBF,GAC5C,MAAO,CACNS,KAAM,cACNP,SACAF,eAMWU,EAAY,SAACV,EAAkBW,GAC3C,MAAO,CACNF,KAAM,WACNT,aACAW,SAMWC,EAAe,SAACC,EAAgBV,EAA8BH,GAC1E,MAAO,CACNS,KAAM,cACNI,SACAV,SACAH,eAgBWc,EAA2B,SAACZ,EAAcF,EAAmBe,GACzE,MAAO,CACNN,KAAM,4BACNP,SACAF,aACAe,iBA+CWC,EAAe,SAACL,GAC5B,8CAAO,WAAOM,GAAP,qBAAAC,EAAA,6DACND,EAASE,GAAS,YACXhB,EAAgC,CACrCP,MAAMe,EAAKf,MACXwB,YAAaT,EAAKS,YAClBC,OAAOV,EAAKU,OACZC,SAAUX,EAAKW,SACfC,UAAWZ,EAAKY,UAChBC,SAAUb,EAAKa,UARX,SAUgB9B,EAAwBiB,EAAKc,WAAWd,EAAKe,GAAGvB,GAVhE,gBAUEwB,EAVF,EAUEA,KACOC,EAA6BD,EAApCA,KAAOC,KAA6BD,EAAvBE,SAAuBF,EAAdG,WAC7Bb,EAASL,EAAaD,EAAKe,GAAIE,EAAMjB,EAAKc,aAC1CR,EAASE,GAAS,YAbb,2CAAP,uDGzKKZ,EAA6C,GAiDtCwB,EAAmB,SAAC/B,GAChC,MAAO,CACNS,KAAM,mBACNT,eAMWgC,EAAwB,SAACpC,EAAeI,GACpD,MAAO,CACNS,KAAM,wBACNb,QACAI,eAwBWiC,EAA+B,SAACjC,EAAmBe,GAC/D,MAAO,CACNN,KAAM,gCACNT,aACAe,iBAqBWmB,EAAmB,SAACC,GAChC,8CAAO,WAAOlB,GAAP,qBAAAC,EAAA,6DACND,EAASE,GAAS,YADZ,kBAGgBzB,EAA4ByC,GAH5C,gBAGER,EAHF,EAGEA,KACMC,EAA8BD,EAApCA,KAAMC,KAAOC,EAAuBF,EAAvBE,SAAuBF,EAAdG,aACXxB,EAAe8B,GAChCnB,EAjDI,CACNR,KAAM,eACL4B,SA+CwBT,IAGvBX,EAASqB,GAAUT,EAAS,KATxB,kDAaLZ,EAASqB,GAAU,oDAbd,yBAgBLrB,EAASE,GAAS,YAhBb,6EAAP,wD,SD9HWb,O,WAAAA,I,kBAAAA,M,KAmBZ,IAAMiC,EAAgC,CACrClB,OAAO,UACPmB,MAAM,KACNC,SAAS,CACRf,GAAG,KACHgB,MAAO,KACPC,MAAO,KACPC,QAAO,GAERC,SAAQ,GAmCI1B,GAAW,SAACE,GACxB,MAAO,CACNZ,KAAK,oBACLqC,QAAQ,CACPzB,YAKUiB,GAAY,SAACE,GACzB,MAAO,CACN/B,KAAM,mBACNqC,QAAQ,CACPN,WAKUO,GAAqB,SAACN,GAClC,MAAO,CACNhC,KAAM,qBACNgC,aAWWO,GAAqB,WACjC,8CAAO,WAAO/B,GAAP,uBAAAC,EAAA,sEACed,IADf,gBACCuB,EADD,EACCA,KACMC,EAA8BD,EAApCA,KAAYG,EAAwBH,EAAxBG,WAAYD,EAAYF,EAAZE,SAC3BC,IAAexB,EAAe8B,IACjCnB,EAAS8B,GAAmB,2BAAInB,GAAL,IAAWgB,QAAQ,MAC9C3B,ECQF,uCAAO,WAAOA,GAAP,iBAAAC,EAAA,6DACND,EAASE,GAAS,YADZ,kBAGgBzB,IAHhB,gBAGEiC,EAHF,EAGEA,KACPV,EArBK,CACNR,KAAM,eACNwC,UAmBwBtB,IACvBA,EAAKuB,SAAQ,SAAAC,GAAE,OAAIlC,GHyBKS,EGzBeyB,EAAGzB,GH0B5C,uCAAO,WAAOT,GAAP,mBAAAC,EAAA,6DACND,EAASE,GAAS,YADZ,SAEezB,EAAsBgC,GAFrC,iBAECC,EAFD,EAECA,MACAa,MAAOY,EAAqBzB,EAArByB,MAAqBzB,EAAd0B,WACrBpC,EAvBM,CACNR,KAAM,WACNT,WAqBmB0B,EApBnB4B,MAoBuBF,IACvBnC,EAASE,GAAS,YALZ,2CAAP,wDADyB,IAACO,KG9BnB,kDAQLT,EAASqB,GAAU,oDARd,yBAWLrB,EAASE,GAAS,YAXb,6EAAP,wDDNEF,EAASqB,GAAUT,EAAS,KAE7BZ,EAhBM,CACNR,KAAM,cACNoC,SAcmB,IATb,2CAAP,uDE9FKN,GAAe,CACpBgB,YAAY,G,QCOE,SAASC,KACvB,IAAMC,EAASC,aAAsC,SAAAC,GAAK,OAAIA,EAAMC,IAAInB,SAASG,UAC3E3B,EAAW4C,cAMjB,OACC,gBAACC,EAAA,EAAD,CAAKC,GAAI,CAACC,SAAU,GAApB,UACC,eAACC,EAAA,EAAD,UACC,eAACC,EAAA,EAAD,CACCC,QACC,eAACC,EAAA,EAAD,CACCC,QAASZ,EACTa,SAXe,WACpBrD,ED2CD,uCAAO,WAAOA,GAAP,qBAAAC,EAAA,sEACed,IADf,gBACCuB,EADD,EACCA,KACAG,EAAuBH,EAAvBG,WAAWD,EAAYF,EAAZE,SACfC,IAAexB,EAAe8B,IAChCnB,EA3BK,CACNR,KAAM,yBACNqC,QAAS,CACRyB,SAwB0B,KAC1BtD,EAAS8B,GAAmB,CAACrB,GAAG,KAAMgB,MAAM,KAAKC,MAAM,KAAKC,QAAO,MAGnE3B,EAASqB,GAAUT,EAAS,KARvB,2CAAP,wDChCM2C,aAAW,iBAGbC,MAAOhB,EAAS,SAAW,YAG7B,eAACiB,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACC,gBAACC,EAAA,EAAD,CAASC,MAAO,CAACC,eAAe,iBAAhC,UACC,uBAAKD,MAAO,CAACE,QAAQ,OAAOC,WAAW,UAAvC,UACC,eAACC,EAAA,EAAD,CACCC,KAAK,SACLC,KAAK,QACLC,MAAM,UACNZ,aAAW,OAJZ,SAMC,eAAC,IAAD,MAED,eAACa,EAAA,EAAD,CAAYC,QAAQ,KAApB,yBAIA7B,GACA,+BACC,eAACwB,EAAA,EAAD,CACCC,KAAK,SACLV,aAAW,0BACXe,gBAAc,cACdC,gBAAc,OACdJ,MAAM,UALP,SAOC,eAACK,EAAA,EAAD,CAAQC,IAAI,aAAaC,IAAI,4C,cCzDxBC,GAAsB,WAClC,IAAMC,EAASnC,aAAqD,SAAAC,GAAK,OAAIA,EAAMC,IAAIvC,UAMvF,OACC,sBAAKwD,MALgB,CACrBiB,OAAQ,OAIR,SACa,YAAXD,GACD,eAAC/B,EAAA,EAAD,CAAKC,GAAI,CAACgC,MAAO,QAAjB,SACC,eAACC,GAAA,EAAD,S,oECNSC,GAAcC,IAAMC,MAAK,YAA8C,IAA5CC,EAA2C,EAA3CA,SAASC,EAAkC,EAAlCA,eAAkC,EACvDC,mBAAS,IAD8C,oBAC1E1G,EAD0E,KACnE2G,EADmE,OAEvDD,mBAAwB,MAF+B,oBAE1E9D,EAF0E,KAEnEgE,EAFmE,KAIzEC,EAAU,WACZ,IAAIC,EAAW9G,EAAM+G,OACJ,KAAbD,GACDN,EAASM,GACRH,EAAS,KAETC,EAAS,sBAcnB,OACE,iCACE,eAACI,GAAA,EAAD,CAAWC,MAAOjH,EACP0E,SAbW,SAACwC,GACrBP,EAASO,EAAEC,cAAcF,QAahBG,WAVa,SAACF,GACZ,OAAVtE,GAAgBgE,EAAS,MACP,KAAfM,EAAEG,UAAsC,SAAnBZ,GACvBI,KAQOjE,QAASA,EACTiC,MAAOjC,GAAgB,eAElC,eAAC0E,GAAA,EAAD,CAAK9B,MAAM,YAAYF,KAAK,QAAQiC,QAASV,EAASW,SAA6B,YAAnBf,EAAhE,SACE,eAACgB,GAAA,EAAD,YCxCKC,GAAiB,SAAC3D,GAAD,OAA4BA,EAAMtB,UAEnDG,GAAQ,SAACmB,GAAD,OAA4BA,EAAMC,IAAIpB,O,oBCO9C+E,GAAarB,IAAMC,MAAK,SAACqB,GACrC,IACMC,EAAoBD,EAAME,OAASF,EAAMG,OAAS,UAAY,UACpE,OACA,eAACC,GAAA,EAAD,CAAQC,QAAS,eAACC,GAAA,EAAD,IAAUxC,QAAQ,YAAYF,MAAOqC,EAAmBN,QAHxD,kBAAMK,EAAML,WAG7B,SAA6FK,EAAME,U,SCTvFK,GAAe7B,IAAMC,MAAK,YAA8C,IAA5C6B,EAA2C,EAA3CA,UAAcR,EAA6B,gCACzDlB,mBAAS,IADgD,oBAC5E1G,EAD4E,KACrE2G,EADqE,OAE7CD,oBAAS,GAFoC,oBAE5E2B,EAF4E,KAE/DC,EAF+D,KAU7EC,EAAmB,WACxBX,EAAMY,SAASxI,GACfsI,GAAe,IAOhB,OACCD,EACG,wBAAOpB,MAAOjH,EAAO0E,SAdE,SAACwC,GAC5BP,EAASO,EAAEC,cAAcF,QAa8BwB,OAAQF,EAAkBnB,WAPxD,SAACF,GACX,UAAVA,EAAEwB,KACLH,KAK6GI,WAAS,IACpH,uBAAMC,cAnBY,WACrBN,GAAe,GACf3B,EAASyB,IAiBN,SAAqCA,O,UCd7BS,GAAQvC,IAAMC,MAAK,SAACqB,GAAsB,IAC/C7G,EAA+D6G,EAA/D7G,KAAM+H,EAAyDlB,EAAzDkB,eAAeC,EAA0CnB,EAA1CmB,gBAAgBC,EAA0BpB,EAA1BoB,uBAG5C,OAAO,sBAAIC,UAAWlI,EAAKU,SAAWnC,EAAW4J,UAAY,UAAY,GAAlE,UACN,wBAAOrI,KAAK,WAAW6D,SAAU,SAACwC,GACjC,IAAIiC,EAAiBjC,EAAEC,cAAc1C,QACrCsE,EAAgB,2BAAIhI,GAAL,IAAUU,OAAQ0H,EAAiB7J,EAAW4J,UAAY5J,EAAW8J,QAEjF3E,QAAS1D,EAAKU,SAAWnC,EAAW4J,YACxC,eAACf,GAAD,CAAcC,UAAWrH,EAAKf,MAAOwI,SAAU,SAACxI,GAAD,OAAmBgJ,EAAuB,2BAAIjI,GAAL,IAAUf,cAClG,eAACqF,EAAA,EAAD,CAAYmC,SAAgC,YAAtBzG,EAAKI,aAA4BoG,QAAS,kBAAMuB,EAAe/H,EAAKe,KAAKwD,KAAK,QAApG,SACC,eAAC+D,GAAA,EAAD,CAAQC,SAAS,kBCIPC,GAAWjD,IAAMC,MAAK,YAA4B,IAAvBqB,EAAsB,oBAEpDvG,EAAW4C,cACXxB,EAAWqB,aAAmD,SAAAC,GAAK,OAAIA,EAAMtB,SAASsF,QAAO,SAAAxE,GAAE,OAAIA,EAAGzB,KAAO8F,EAAM9F,MAAI,MACvH4B,EAAQI,aAAsD,SAAAC,GAAK,OAAIA,EAAML,MAAMkE,EAAM9F,OAG3F0H,EAAgB9F,EACI,WAApBjB,EAASsF,SACTyB,EAAgB9F,EAAMqE,QAAO,SAAA0B,GAAC,OAAIA,EAAEhI,SAAWnC,EAAW8J,QAEtC,cAApB3G,EAASsF,SACTyB,EAAgB9F,EAAMqE,QAAO,SAAA0B,GAAC,OAAIA,EAAEhI,SAAWnC,EAAW4J,cAG9D,IAAMQ,EAAaC,uBAAY,SAACrJ,EAAgBF,GAC5CiB,EZmIoB,SAACf,EAAcF,GAC1C,8CAAO,WAAOiB,GAAP,SAAAC,EAAA,6DACND,EAASE,GAAS,YAClBF,EAASH,EAAyBZ,EAAOF,EAAW,YAF9C,SAGAN,EAAwBM,EAAYE,GAHpC,OAINe,EAAST,EAAaN,EAAQF,IAC9BiB,EAASE,GAAS,YALZ,2CAAP,sDYpIgBqI,CAAatJ,EAAOF,MAC9B,CAACiB,IAEEwF,EAAU8C,uBAAa,SAAC3J,EAAeI,GAC1CiB,EZyGqB,SAACrB,EAAaI,GACzC,8CAAO,WAAOiB,GAAP,qBAAAC,EAAA,6DACND,EAASE,GAAS,YADZ,kBAGgBzB,EAAwBM,EAAYJ,GAHpD,gBAGE+B,EAHF,EAGEA,KACOC,EAA+BD,EAAtCA,KAAOC,KAAOC,EAAwBF,EAAxBE,SAAwBF,EAAdG,aACbxB,EAAe8B,GAChCnB,EAASP,EAAUV,EAAY4B,IAG/BX,EAASqB,GAAUT,EAAS,KATxB,kDAaLZ,EAASqB,GAAU,oDAbd,yBAgBLrB,EAASE,GAAS,YAhBb,6EAAP,sDY1GesI,CAAa7J,EAAMI,MAC5B,CAACiB,IACEyI,EAAeH,uBAAY,SAAC1C,EAAkB7G,GAChDiB,ETMwB,SAAC4F,EAAkB7G,GAClD,MAAO,CACNS,KAAM,mBACNoG,QACA7G,cSVe2J,CAAiB9C,EAAO7G,MAClC,CAACiB,IACE2I,EAAsBL,uBAAa,SAAC3J,EAAeI,GACvDiB,ET0G0B,SAACrB,EAAaI,GAC7C,8CAAO,WAAOiB,GAAP,SAAAC,EAAA,6DACND,EAASE,GAAS,YADZ,SAEAzB,EAA4BM,EAAWJ,GAFvC,OAGNqB,EAASe,EAAsBpC,EAAMI,IACrCiB,EAASE,GAAS,YAJZ,2CAAP,sDS3Gc0I,CAAiBjK,EAAMI,MAC/B,CAACiB,IACE6I,EAAiBP,uBAAa,SAACvJ,GAClCiB,ET6FyB,SAACjB,GAChC,8CAAO,WAAOiB,GAAP,SAAAC,EAAA,6DACND,EAASE,GAAS,YAClBF,EAASgB,EAA6BjC,EAAW,YAF3C,SAGAN,EAA4BM,GAH5B,OAINiB,EAASc,EAAiB/B,IAC1BiB,EAASE,GAAS,YALZ,2CAAP,sDS9Fe4I,CAAiB/J,MAC1B,CAACiB,IACE2H,EAAyBW,uBAAY,SAAC5I,GACxCM,EAASD,EAAaL,MACvB,CAACM,IACE0H,EAAkBY,uBAAY,SAAC5I,GACjCM,EAASD,EAAaL,MACvB,CAACM,IAEE+I,EAAwBT,uBAAY,WACtCO,EAAetC,EAAM9F,MACvB,CAACoI,EAAetC,EAAM9F,KAClBuI,EAAoBV,uBAAY,kBAAMG,EAAa,MAAOlC,EAAM9F,MAAI,CAACgI,EAAalC,EAAM9F,KACxFwI,EAAuBX,uBAAY,kBAAMG,EAAa,SAAUlC,EAAM9F,MAAI,CAACgI,EAAalC,EAAM9F,KAC9FyI,EAA0BZ,uBAAY,kBAAMG,EAAa,YAAalC,EAAM9F,MAAI,CAACgI,EAAalC,EAAM9F,KAEpG0I,EAAiBb,uBAAY,SAAC3J,GAChC6G,EAAQ7G,EAAO4H,EAAM9F,MACtB,CAAC+E,EAASe,EAAM9F,KACb2I,EAA6Bd,uBAAY,SAAC3J,GAC5CgK,EAAoBhK,EAAO4H,EAAM9F,MAClC,CAACkI,EAAqBpC,EAAM9F,KACzBgH,EAAiBa,uBAAY,SAAC7H,GAAD,OAAgB4H,EAAW5H,EAAI8F,EAAM9F,MAAK,CAAC4H,EAAY9B,EAAM9F,KAGhG,OAAO,iCACH,gCAAI,eAACqG,GAAD,CAAcC,UAAW3F,EAASzC,MAAOwI,SAAUiC,IACnD,eAACpF,EAAA,EAAD,CAAYkC,QAAS6C,EAAuB5C,SAAoC,YAA1B/E,EAAStB,aAA4BmE,KAAK,QAAhG,SACI,eAAC+D,GAAA,EAAD,CAAQC,SAAS,eAGzB,eAACjD,GAAD,CAAaG,SAAUgE,EAAgB/D,eAAgBhE,EAAStB,eAChE,qBAAI8D,MAAO,CAACyF,cAAe,QAA3B,SACKlB,GAAiBA,EAAcmB,KAAI,SAAAlB,GAAC,OAAI,eAACZ,GAAD,CAEvC9H,KAAM0I,EACNX,eAAgBA,EAChBC,gBAAiBA,EACjBC,uBAAwBA,GAJnBS,EAAE3H,SAOb,iCACI,eAAC6F,GAAD,CAAYJ,QAAS8C,EAAmBvC,KAAM,MAAOC,OAAQtF,EAASsF,SACtE,eAACJ,GAAD,CAAYJ,QAAS+C,EAAsBxC,KAAM,SAAUC,OAAQtF,EAASsF,SAC5E,eAACJ,GAAD,CAAYJ,QAASgD,EAAyBzC,KAAM,YAAaC,OAAQtF,EAASsF,kBC/FjF6C,GAAe,WAC3B,IAAMvJ,EAAW4C,cACXxB,EAAWqB,YAAY4D,IAEvBmD,EAAclB,sBAAW,uCAAE,WAAOpH,GAAP,SAAAjB,EAAA,sDAChCD,EAASiB,EAAiBC,IADM,2CAAF,sDAE7B,CAAClB,IAEGyJ,EAAsBrI,EAASkI,KAAI,SAAAI,GACxC,OACC,eAACC,GAAA,EAAD,CAAkBhJ,MAAI,EAAtB,SACC,eAACiJ,GAAA,EAAD,CAAOC,UAAW,EAAGjG,MAAO,CAACkG,QAAS,QAAtC,SACC,eAAC5B,GAAD,CAECzH,GAAIiJ,EAAGjJ,IADFiJ,EAAGjJ,OAHAiJ,EAAGjJ,OAWhB,OACC,uBAAKmH,UAAU,MAAf,UACC,eAAC+B,GAAA,EAAD,CAAMI,WAAS,EAACnG,MAAO,CAACoG,OAAQ,SAAUnG,eAAgB,UAA1D,SACC,eAACmB,GAAD,CAAaG,SAAUqE,MAExB,eAACG,GAAA,EAAD,CAAMI,WAAS,EAACE,QAAS,EAAzB,SACER,QC3BQS,GAAgB,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,SAA0C,6BAGxE,OAFkB1H,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,IAAInB,SAASG,UAK9EwI,EAFC,eAAC,KAAD,CAAUC,GAAG,Y,6DCYTC,GAAY,WACxB,IAAMrK,EAAW4C,cACX0H,EAAY7H,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,IAAInB,SAASG,UAgB/E4I,EAASC,aAAU,CACxBC,cAAe,CACdhJ,MAAO,GACPiJ,SAAU,GACVC,YAAY,GAEbC,SApBgB,SAACC,GAEjB,IAAMC,EAAmC,GASzC,OARKD,EAAOpJ,MAEA,4CAA4CsJ,KAAKF,EAAOpJ,SACnEqJ,EAAOrJ,MAAQ,yBAFfqJ,EAAOrJ,MAAQ,WAIXoJ,EAAOH,WACXI,EAAOJ,SAAW,yBAEZI,GAUPE,SAAU,SAAAH,GXDgB,IAACzL,EWE1BY,GXF0BZ,EWEJyL,EXDxB,uCAAO,WAAO7K,GAAP,qBAAAC,EAAA,sEACed,EAA4BC,GAD3C,iBACCsB,EADD,EACCA,MACAA,KAAYG,EAAuBH,EAAvBG,WAAWD,EAAYF,EAAZE,SAC3BC,IAAexB,EAAe8B,IAChCnB,EAxBK,CACNR,KAAM,wBACNqC,QAAS,CACRyB,SAqByB,KACzBtD,EAAS+B,OAGT/B,EAASqB,GAAUT,EAAS,KARvB,2CAAP,2DWKA,OAAG0J,EACK,eAAC,KAAD,CAAUF,GAAIa,GAAKC,WAI1B,sBAAKtH,MAAO,CAACE,QAAS,OAAQD,eAAgB,SAASsH,UAAW,QAAlE,SACC,+BACC,eAACvB,GAAA,EAAD,CAAOC,UAAW,EAAGjG,MAAO,CAACkG,QAAS,QAAtC,SACA,uBAAMkB,SAAUT,EAAOa,aAAvB,SACC,gBAACC,GAAA,EAAD,WACC,gBAACC,GAAA,EAAD,WACC,8DACA,mDAED,uBAAK1H,MAAO,CAACE,QAAS,OAAQyH,cAAe,SAAUxH,WAAY,SAAUiG,OAAQ,UAArF,UACC,eAACxF,EAAA,EAAD,CAAQZ,MAAO,CAAC4H,gBAAiB,MAAOC,aAAc,QAAtD,SACC,eAAC,KAAD,MAED,eAACrH,EAAA,EAAD,CAAYsH,UAAU,KAAKrH,QAAQ,KAAnC,wBAID,gBAACrB,EAAA,EAAD,WACC,eAAC2C,GAAA,EAAD,aAAWnC,MAAO+G,EAAOO,OAAOrJ,OAAS8I,EAAOoB,QAAQlK,MAAQ8I,EAAOO,OAAOrJ,MAAQ,QAChFuI,OAAO,SACPzI,QAASgJ,EAAOO,OAAOrJ,SAAW8I,EAAOoB,QAAQlK,OAC7C8I,EAAOqB,cAAc,WAE/B,eAACjG,GAAA,EAAD,aAAWnG,KAAK,WACVqM,aAAa,KACbrI,MAAO+G,EAAOO,OAAOJ,UAAYH,EAAOoB,QAAQjB,SAAWH,EAAOO,OAAOJ,SAAW,WACpFV,OAAO,SACPzI,QAASgJ,EAAOO,OAAOJ,YAAcH,EAAOoB,QAAQjB,UAChDH,EAAOqB,cAAc,cAE/B,eAAC3I,EAAA,EAAD,aACCW,MAAO,CAACoG,OAAQ,UAChBxG,MAAO,cACPN,QAAS,eAAC4I,GAAA,EAAD,KACLvB,EAAOqB,cAAc,gBAE1B,eAACjF,GAAA,EAAD,CACCnH,KAAM,SACN6E,QAAS,YACTF,MAAO,UAHR,kCCzFM8G,GAAO,CACnBC,SAAS,YACTa,MAAM,UAIMC,GAAc,WAC1B,OACC,+BACC,gBAAC,KAAD,WACC,eAAC,KAAD,CAAOC,KAAM,IAAKC,QAAS,eAAC,GAAD,MAC3B,eAAC,KAAD,CAAOD,KAAM,YAAaC,QACzB,eAAC,GAAD,UACC,eAAC,GAAD,QAGF,eAAC,KAAD,CAAOD,KAAMhB,GAAKC,SAAUgB,QAAS,eAAC,GAAD,MACrC,eAAC,KAAD,CAAOD,KAAMhB,GAAKc,MAAOG,QAAS,eAAC,GAAD,Y,oBCZzBC,GAAalH,IAAMC,MAAK,YAAmC,IAAjCkH,EAAgC,EAAhCA,YAChCpM,EAAW4C,cAIXyJ,EAAwB,MAAfD,EACTE,EAAc,SAACC,EAA8BC,GACnC,cAAXA,GAGJxM,EAASqB,GAAU,QAGpB,OACC,qCACC,eAACoL,GAAA,EAAD,CAAUC,KAAML,EAAQM,iBAAkB,IAAMC,QAASN,EAAzD,SACC,gBAACO,GAAA,EAAD,CAAOjJ,MAdS,CAClB4H,gBAAgB,OAaYoB,QAASN,EAAajI,QAAQ,SAASyI,SAAS,QAA1E,UACEV,EADF,0B,UCzBSW,GAAS,WAQrB,OACA,sBAAKnJ,MARiB,CACrBoJ,UAAU,QACVlJ,QAAS,OACTD,eAAe,SACfE,WAAW,UAIZ,SACC,eAACkJ,GAAA,EAAD,CAAkB9I,MAAM,eCwBX+I,OAvBf,WACC,IAAMC,EAAY1K,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,IAAIf,WACtE5B,EAAW4C,cACXwJ,EAAc3J,YAAYlB,IAMhC,OAJA6L,qBAAU,WACTpN,EAAS+B,QACR,CAAC/B,IAECmN,EACI,eAAC,GAAD,IAIP,gBAACE,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACC,eAAC/K,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC4J,GAAD,CAAYC,YAAaA,QCpBRmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uBCVAC,GAAcC,aAAiB,CACpCzM,SlBa8B,WAAuF,IAAtFsB,EAAqF,uDAA7EpD,EAAgBwO,EAA6D,uCACpH,OAAQA,EAAOtO,MACd,IAAK,mBACJ,OAAO,YAAIkD,EAAM4G,KAAI,SAAAlB,GAAC,OAAIA,EAAE3H,KAAOqN,EAAO/O,WAAhB,2BAAiCqJ,GAAjC,IAAoC1B,OAAQoH,EAAOlI,QAASwC,MACvF,IAAK,mBACJ,OAAO,YACH1F,EAAMgE,QAAO,SAAA0B,GAAC,OAAIA,EAAE3H,KAAOqN,EAAO/O,eAEvC,IAAK,wBACJ,OAAO2D,EAAM4G,KAAI,SAAAI,GAAE,OAAIA,EAAGjJ,KAAOqN,EAAO/O,WAAjB,2BAAkC2K,GAAlC,IAAsC/K,MAAOmP,EAAOnP,QAAS+K,KACrF,IAAK,eACJ,MAAM,CAAN,2BACKoE,EAAO1M,UADZ,IAEEsF,OAAQ,MACR5G,aAAa,UAHf,mBAKK4C,IAEN,IAAK,eACJ,OAAOoL,EAAO9L,UAAUsH,KAAI,SAAApH,GAAE,kCAASA,GAAT,IAAawE,OAAQ,MAAO5G,aAAa,YACxE,IAAK,gCACJ,OAAO4C,EAAM4G,KAAI,SAAAlB,GAAC,OAAIA,EAAE3H,KAAOqN,EAAO/O,WAAhB,2BAAiCqJ,GAAjC,IAAmCtI,aAAagO,EAAOhO,eAAgBsI,KAC9F,QACC,OAAO1F,IkBnCTL,MrBgC0B,WAAuE,IAAtEK,EAAqE,uDAA7DpD,EAAgBwO,EAA6C,uCAChG,OAAQA,EAAOtO,MACd,IAAK,cACJ,OAAO,2BAAIkD,GAAX,kBAAmBoL,EAAO/O,WAAa2D,EAAMoL,EAAO/O,YAAY2H,QAAO,SAAA0B,GAAC,OAAIA,EAAE3H,KAAOqN,EAAO7O,YAC7F,IAAK,WACJ,OAAO,2BACHyD,GADJ,kBAEEoL,EAAO/O,WAFT,4BAE4B+O,EAAOpO,MAFnC,IAEwCI,aAAa,UAFrD,mBAEgE4C,EAAMoL,EAAO/O,gBAE9E,IAAK,cACJ,OAAO,2BACH2D,GADJ,kBAEEoL,EAAO/O,WAAa2D,EAAMoL,EAAO/O,YAAYuK,KAAI,SAAAyE,GAAC,OAAIA,EAAEtN,KAAOqN,EAAOlO,OAAhB,2BACnDmO,GACAD,EAAO5O,QACP6O,OAEN,IAAK,eACJ,OAAO,2BACHrL,GADJ,kBAEEoL,EAAO1M,SAASX,GAAK,KAExB,IAAK,WACJ,OAAO,2BACHiC,GADJ,kBACYoL,EAAO/O,WAAa+O,EAAOzL,MAAMiH,KAAI,SAAAlB,GAAC,kCAASA,GAAT,IAAYtI,aAAc,cAE7E,IAAK,mBAEJ,cADO4C,EAAMoL,EAAO/O,YACb2D,EACR,IAAK,4BACJ,OAAO,2BACHA,GADJ,kBAEEoL,EAAO/O,WAAa2D,EAAMoL,EAAO/O,YAAYuK,KAAI,SAAAlB,GAAC,OAAIA,EAAE3H,KAAOqN,EAAO7O,OAAhB,2BACnDmJ,GADmD,IAChDtI,aAAcgO,EAAOhO,eACxBsI,OAEN,QACC,OAAO1F,IqBpETC,InB2ByB,WAAuE,IAAtED,EAAqE,uDAA/DpB,EAAcwM,EAAiD,uCAC/F,OAAQA,EAAOtO,MACd,IAAK,oBAGL,IAAK,mBACJ,OAAO,2BAAIkD,GACPoL,EAAOjM,SAEZ,IAAK,qBACJ,OAAO,2BACHa,GADJ,IAEClB,SAASsM,EAAOtM,WAElB,IAAK,cACJ,OAAO,2BACHkB,GADJ,IAECd,QAAQkM,EAAOlM,UAEjB,QACC,OAAOc,ImB9CTsL,KjBA0B,WAAyE,IAAxEtL,EAAuE,uDAAjEpB,GAAcwM,EAAmD,uCAClG,OAAQA,EAAOtO,MACd,IAAK,wBACL,IAAK,yBACJ,OAAO,2BACHkD,GACAoL,EAAOjM,SAEZ,QACC,OAAOa,MiBFGuL,GAAQC,aAAYN,GAAYO,aAAgBC,OAI7DZ,OAAOS,MAAMA,G,aCdbI,IAASC,OACR,eAAC,KAAD,UACC,eAAC,IAAD,CAAUL,MAAOA,GAAjB,SACC,eAAC,GAAD,QAGFM,SAASC,eAAe,SF4HnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxN,GACLyN,QAAQzN,MAAMA,EAAM0N,c","file":"static/js/main.28e0d035.chunk.js","sourcesContent":["import {AddTodolistACType, RemoveTodoListACType, RequestStatusType} from \"./TodoListReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AxiosUpdateTaskModule, todolistsAPI} from \"../ApiTodolists/ApiTodolist\";\r\nimport {isErrorAC, isLoadAC, ResultCodeType} from \"./AppReducer\";\r\n\r\nexport type TasksStateType = {\r\n\t[key: string]: Array<TaskTypeHandler>\r\n}\r\n\r\n\r\nexport enum TaskStatus {\r\n\tNew = 0,\r\n\tInProgress = 1,\r\n\tCompleted = 2,\r\n\tDraft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n\tLow = 0,\r\n\tMiddle = 1,\r\n\tHi = 2,\r\n\tUrgently = 3,\r\n\tLater = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n\tdescription: string\r\n\ttitle: string\r\n\tstatus: TaskStatus\r\n\tpriority: TaskPriorities\r\n\tstartDate: string\r\n\tdeadline: string\r\n\tid: string\r\n\ttodoListId:string\r\n\torder: number\r\n\taddedDate: string\r\n}\r\n\r\nexport type TaskTypeHandler =  TaskType & {\r\n\tentityStatus:RequestStatusType\r\n}\r\nconst initialization:TasksStateType = {}\r\n\r\nexport const TaskReducer = (state = initialization, action: TaskHandlerTypes): TasksStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"REMOVE-TASK\":\r\n\t\t\treturn {...state, [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.taskId)}\r\n\t\tcase \"ADD-TASK\":\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.todolistID] : [{...action.task,entityStatus:'idle'},...state[action.todolistID]]\r\n\t\t\t}\r\n\t\tcase \"UPDATE-TASK\":\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.todolistID]: state[action.todolistID].map(b => b.id === action.TaskId ? {\r\n\t\t\t\t\t...b,\r\n\t\t\t\t\t...action.module\r\n\t\t\t\t} : b)\r\n\t\t\t}\r\n\t\tcase \"ADD-TODOLIST\":\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.todolist.id]: []\r\n\t\t\t}\r\n\t\tcase \"SET-TASK\":\r\n\t\t\treturn {\r\n\t\t\t\t...state, [action.todolistID]: action.tasks.map(t => ({...t, entityStatus: 'idle'}))\r\n\t\t\t}\r\n\t\tcase \"REMOVE-TODOLISTS\":\r\n\t\t\tdelete state[action.todolistID]\r\n\t\t\treturn state\r\n\t\tcase \"CHANGE-TASK-ENTITY-STATUS\":\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.todolistID]: state[action.todolistID].map(t => t.id === action.taskId ? {\r\n\t\t\t\t\t...t, entityStatus: action.entityStatus\r\n\t\t\t\t} : t)\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n\r\nexport type TaskHandlerTypes =\r\n\tRemoveTaskACType\r\n\t| AddTaskACType\r\n\t| AddTodolistACType\r\n\t| ChangeTaskTitleACType\r\n\t| RemoveTodoListACType\r\n\t| SetTaskACType\r\n\t| changeTaskEntityStatusType\r\n\r\nexport type RemoveTaskACType = ReturnType<typeof removeTaskAC>\r\n\r\nexport const removeTaskAC = (taskId: string, todolistID: string) => {\r\n\treturn {\r\n\t\ttype: 'REMOVE-TASK',\r\n\t\ttaskId,\r\n\t\ttodolistID\r\n\t} as const\r\n}\r\n\r\nexport type AddTaskACType = ReturnType<typeof addTaskAC>\r\n\r\nexport const addTaskAC = (todolistID:string,task:TaskType) => {\r\n\treturn {\r\n\t\ttype: 'ADD-TASK',\r\n\t\ttodolistID,\r\n\t\ttask,\r\n\t} as const\r\n}\r\n\r\nexport type ChangeTaskTitleACType = ReturnType<typeof updateTaskAC>\r\n\r\nexport const updateTaskAC = (TaskId: string, module:AxiosUpdateTaskModule, todolistID: string) => {\r\n\treturn {\r\n\t\ttype: 'UPDATE-TASK',\r\n\t\tTaskId,\r\n\t\tmodule,\r\n\t\ttodolistID\r\n\t} as const\r\n}\r\n\r\nexport type SetTaskACType = ReturnType<typeof setTaskAC>\r\n\r\nexport const setTaskAC = (todolistID:string,tasks:TaskType[]) => {\r\n\treturn {\r\n\t\ttype: 'SET-TASK',\r\n\t\ttodolistID,\r\n\t\ttasks,\r\n\t} as const\r\n}\r\n\r\nexport type changeTaskEntityStatusType = ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\nexport const changeTaskEntityStatusAC = (taskId:string,todolistID: string,entityStatus:RequestStatusType) => {\r\n\treturn {\r\n\t\ttype: 'CHANGE-TASK-ENTITY-STATUS',\r\n\t\ttaskId,\r\n\t\ttodolistID,\r\n\t\tentityStatus,\r\n\t} as const\r\n}\r\n\r\nexport const getTasksTC = (id:string) => {\r\n\treturn async (dispatch:Dispatch) => {\r\n\t\tdispatch(isLoadAC('loading'))\r\n\t\tconst {data} = await todolistsAPI.getTasks(id)\r\n\t\tconst {error, items, totalCount} = data\r\n\t\tdispatch(setTaskAC(id, items))\r\n\t\tdispatch(isLoadAC('success'))\r\n\t}\r\n}\r\n\r\n\r\nexport const createTaskTC = (title:string,todolistID:string) => {\r\n\treturn async (dispatch:Dispatch) => {\r\n\t\tdispatch(isLoadAC('loading'))\r\n\t\ttry{\r\n\t\t\tconst {data} = await todolistsAPI.createTask(todolistID, title)\r\n\t\t\tconst {data: {item}, messages, resultCode} = data\r\n\t\t\tif(resultCode === ResultCodeType.OK) {\r\n\t\t\t\tdispatch(addTaskAC(todolistID, item))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdispatch(isErrorAC(messages[0]))\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e){\r\n\t\t\tdispatch(isErrorAC('Authorization has been denied for this request.'))\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tdispatch(isLoadAC('success'))\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const deleteTaskTC = (taskId:string,todolistID:string) => {\r\n\treturn async (dispatch:Dispatch) => {\r\n\t\tdispatch(isLoadAC('loading'))\r\n\t\tdispatch(changeTaskEntityStatusAC(taskId,todolistID,'loading'))\r\n\t\tawait todolistsAPI.deleteTask(todolistID, taskId);\r\n\t\tdispatch(removeTaskAC(taskId, todolistID));\r\n\t\tdispatch(isLoadAC('success'))\r\n\t}\r\n}\r\n\r\nexport const updateTaskTC = (task:TaskType) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\tdispatch(isLoadAC('loading'))\r\n\t\t\tconst module: AxiosUpdateTaskModule = {\r\n\t\t\t\ttitle:task.title,\r\n\t\t\t\tdescription: task.description,\r\n\t\t\t\tstatus:task.status,\r\n\t\t\t\tpriority: task.priority,\r\n\t\t\t\tstartDate: task.startDate,\r\n\t\t\t\tdeadline: task.deadline,\r\n\t\t\t}\r\n\t\t\tconst {data} = await todolistsAPI.updateTask(task.todoListId,task.id,module)\r\n\t\t\tconst {data: {item},messages,resultCode} = data\r\n\t\t\tdispatch(updateTaskAC(task.id, item, task.todoListId))\r\n\t\t\tdispatch(isLoadAC('success'))\r\n\t\t}\r\n\t}","import axios from \"axios\";\r\nimport {TaskPriorities, TaskStatus, TaskType} from \"../reducer/TaskReducer\";\r\nimport {FormikType} from \"../components/AuthLogin/AuthLogin\";\r\n\r\ntype AxiosAuthMe = {\r\n\tid:number,\r\n\temail:string,\r\n\tlogin:string,\r\n}\r\n\r\ntype AxiosGetTodolists = {\r\n\tid: string\r\n\taddedDate:string\r\n\torder: number\r\n\ttitle: string\r\n}\r\ntype AxiosResponseType<D> = {\r\n\tresultCode: number\r\n\tmessages: string[]\r\n\tdata: D\r\n}\r\ntype AxiosGetTasks = {\r\n\titems: TaskType[]\r\n\ttotalCount: number\r\n\terror: string\r\n}\r\n\r\nexport type AxiosUpdateTaskModule = {\r\n\ttitle: string\r\n\tdescription:string\r\n\tstatus: TaskStatus\r\n\tpriority: TaskPriorities\r\n\tstartDate: string\r\n\tdeadline: string\r\n}\r\n\r\nconst initial = axios.create(\r\n\t{\r\n\twithCredentials: true,\r\n\theaders: {\r\n\t\t'API-KEY': '5c7c1e5a-aa4c-4b00-a92b-b6f5df506a28'\r\n\t},\r\n\tbaseURL:'https://social-network.samuraijs.com/api/1.1/'\r\n}\r\n)\r\n\r\nexport const todolistsAPI = {\r\n\tgetTodolists() {\r\n\t\treturn initial.get<Array<AxiosGetTodolists>>('todo-lists',{})\r\n\t},\r\n\tcreateTodolist(title:string) {\r\n\t\treturn initial.post<AxiosResponseType<{item:AxiosGetTodolists}>>('todo-lists', {title}, {})\r\n\t},\r\n\tdeleteTodolist(todolistId:string) {\r\n\t\treturn initial.delete<AxiosResponseType<{}>>(`todo-lists/${todolistId}`,  {})\r\n\t},\r\n\tupdateTodolist(todolistID:string,title:string) {\r\n\t\treturn initial.put<AxiosResponseType<{}>>(`todo-lists/${todolistID}`,{title},  {})\r\n\t},\r\n\tgetTasks(todolistId:string) {\r\n\t\treturn initial.get<AxiosGetTasks>(`todo-lists/${todolistId}/tasks`,  {})\r\n\t},\r\n\tcreateTask(todolistId:string,title:string) {\r\n\t\treturn initial.post<AxiosResponseType<{item:TaskType}>>(`todo-lists/${todolistId}/tasks`,  {title},{})\r\n\t},\r\n\tdeleteTask(todolistId:string,taskId:string) {\r\n\t\treturn initial.delete<AxiosResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`,  {})\r\n\t},\r\n\tupdateTask(todolistID:string,taskId:string,module:AxiosUpdateTaskModule) {\r\n\t\treturn initial.put<AxiosResponseType<{item:TaskType}>>(`todo-lists/${todolistID}/tasks/${taskId}`,{...module},  {})\r\n\t},\r\n}\r\nexport const authInitialisationAPI = {\r\n\tauthMe() {\r\n\t\treturn initial.get<AxiosResponseType<AxiosAuthMe>>('/auth/me', {})\r\n\t},\r\n\tlogIn(logInForm:FormikType) {\r\n\t\treturn initial.post<AxiosResponseType<{ userId: string }>>('/auth/login', {...logInForm}, {})\r\n\t},\r\n\tlogOut() {\r\n\t\treturn initial.delete<AxiosResponseType<{}>>('/auth/login', {})\r\n\t}\r\n}","import {authInitialisationAPI} from \"../ApiTodolists/ApiTodolist\";\r\nimport {setTodolistsTC} from \"./TodoListReducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type StatusType = 'loading' | 'success';\r\n\r\nexport enum ResultCodeType {\r\n\tOK =0,\r\n\tError=1,\r\n}\r\n\r\nexport type dataFormType = {\r\n\tid: null | number\r\n\temail: null | string\r\n\tlogin: null | string\r\n\tauthMe: boolean\r\n}\r\n\r\nexport type InitialStateType = {\r\n\tstatus: StatusType\r\n\terror: string | null\r\n\tdataForm: dataFormType\r\n\tspinner:boolean\r\n}\r\n\r\nconst initialState:InitialStateType = {\r\n\tstatus:'success',\r\n\terror:null,\r\n\tdataForm:{\r\n\t\tid:null,\r\n\t\temail: null,\r\n\t\tlogin: null,\r\n\t\tauthMe:false,\r\n\t},\r\n\tspinner:true\r\n}\r\n\r\n\r\nexport const AppReducer = (state=initialState, action:ActionAppReducerType):InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'APP/LOAD-PROGRESS':\r\n\t\t\treturn {...state,\r\n\t\t\t...action.payload}\r\n\t\tcase 'APP/ERROR-STATUS'\t:\r\n\t\t\treturn {...state,\r\n\t\t\t\t...action.payload\r\n\t\t\t}\r\n\t\tcase \"APP/INITIALIZATION\":\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdataForm:action.dataForm\r\n\t\t\t}\r\n\t\tcase \"APP/SPINNER\":\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tspinner:action.spinner\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n\r\nexport type ActionAppReducerType =\r\n\tReturnType<typeof isLoadAC>\r\n\t| ReturnType<typeof isErrorAC>\r\n\t| ReturnType<typeof isInitializationAC>\r\n\t| ReturnType<typeof spinnerAC>\r\n\r\nexport const isLoadAC = (status:StatusType) => {\r\n\treturn {\r\n\t\ttype:'APP/LOAD-PROGRESS',\r\n\t\tpayload:{\r\n\t\t\tstatus\r\n\t\t}\r\n\t} as const\r\n}\r\n\r\nexport const isErrorAC = (error:string | null) => {\r\n\treturn {\r\n\t\ttype: 'APP/ERROR-STATUS',\r\n\t\tpayload:{\r\n\t\t\terror\r\n\t\t}\r\n\t} as const\r\n}\r\n\r\nexport const isInitializationAC = (dataForm:dataFormType) => {\r\n\treturn {\r\n\t\ttype: 'APP/INITIALIZATION',\r\n\t\tdataForm\r\n\t} as const\r\n}\r\n\r\nexport const spinnerAC = (spinner:boolean) => {\r\n\treturn {\r\n\t\ttype: 'APP/SPINNER',\r\n\t\tspinner\r\n\t} as const\r\n}\r\n\r\nexport const isInitializationTC = () => {\r\n\treturn async (dispatch: Dispatch<any>) => {\r\n\t\tconst {data} = await authInitialisationAPI.authMe()\r\n\t\tconst {data: item, resultCode, messages} = data\r\n\t\tif (resultCode === ResultCodeType.OK) {\r\n\t\t\tdispatch(isInitializationAC({...item, authMe: true}))\r\n\t\t\tdispatch(setTodolistsTC())\r\n\t\t} else {\r\n\t\t\tdispatch(isErrorAC(messages[0]))\r\n\t\t}\r\n\t\tdispatch(spinnerAC(false))\r\n\t}\r\n}","import {Dispatch} from \"redux\";\r\nimport {todolistsAPI} from \"../ApiTodolists/ApiTodolist\";\r\nimport {isErrorAC, isLoadAC, ResultCodeType} from \"./AppReducer\";\r\nimport {getTasksTC} from \"./TaskReducer\";\r\n\r\nexport type valueType = 'All' | 'Active' | 'Completed';\r\nexport type RequestStatusType = 'idle' | 'loading';\r\n\r\nexport type TodolistType = {\r\n\tid: string\r\n\ttitle: string\r\n\torder: number\r\n\taddedDate:string\r\n}\r\n\r\nexport type TodolistTypeHandler = TodolistType & {\r\n\tfilter:valueType,\r\n\tentityStatus:RequestStatusType\r\n}\r\n\r\nconst initialization: Array<TodolistTypeHandler> = []\r\n\r\nexport const TodoListReducer = (state = initialization, action: TodolistHandlerTypes): Array<TodolistTypeHandler> => {\r\n\tswitch (action.type) {\r\n\t\tcase 'CHANGE-TODOLISTS':\r\n\t\t\treturn [...state.map(t => t.id === action.todolistID ? {...t, filter: action.value} : t)]\r\n\t\tcase \"REMOVE-TODOLISTS\":\r\n\t\t\treturn [\r\n\t\t\t\t...state.filter(t => t.id !== action.todolistID)\r\n\t\t\t]\r\n\t\tcase \"CHANGE-TODOLIST-TITLE\":\r\n\t\t\treturn state.map(tl => tl.id === action.todolistID ? {...tl, title: action.title} : tl)\r\n\t\tcase \"ADD-TODOLIST\":\r\n\t\t\treturn [\r\n\t\t\t\t{...action.todolist,\r\n\t\t\t\t\tfilter: 'All',\r\n\t\t\t\t\tentityStatus:'idle'\r\n\t\t\t\t}\r\n\t\t\t\t,...state\r\n\t\t\t]\r\n\t\tcase \"SET-TODOLIST\":\r\n\t\t\treturn action.todolists.map(el => ({...el, filter: 'All',\tentityStatus:'idle'}))\r\n\t\tcase \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n\t\t\treturn state.map(t => t.id === action.todolistID ? {...t,entityStatus:action.entityStatus} : t)\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n\r\nexport type TodolistHandlerTypes =\r\n\tChangeTodoListACType\r\n\t| RemoveTodoListACType\r\n\t| ChangeTodolistTitleACType\r\n\t| AddTodolistACType\r\n\t| SetTodolistACType\r\n\t| ChangeTodolistEntityStatusACType\r\n\r\nexport type ChangeTodoListACType = ReturnType<typeof changeTadoListAC>\r\n\r\nexport const changeTadoListAC = (value: valueType, todolistID: string) => {\r\n\treturn {\r\n\t\ttype: 'CHANGE-TODOLISTS',\r\n\t\tvalue,\r\n\t\ttodolistID\r\n\t} as const\r\n}\r\nexport type RemoveTodoListACType = ReturnType<typeof removeTodolistAC>\r\n\r\nexport const removeTodolistAC = (todolistID: string) => {\r\n\treturn {\r\n\t\ttype: 'REMOVE-TODOLISTS',\r\n\t\ttodolistID,\r\n\t} as const\r\n}\r\n\r\nexport type ChangeTodolistTitleACType = ReturnType<typeof changeTodolistTitleAC>\r\n\r\nexport const changeTodolistTitleAC = (title: string, todolistID: string) => {\r\n\treturn {\r\n\t\ttype: \"CHANGE-TODOLIST-TITLE\",\r\n\t\ttitle,\r\n\t\ttodolistID\r\n\t} as const\r\n}\r\n\r\nexport type AddTodolistACType = ReturnType<typeof addTodolistAC>\r\n\r\nexport const addTodolistAC = (todolist:TodolistType) => {\r\n\treturn {\r\n\t\ttype: 'ADD-TODOLIST',\r\n\t\t\ttodolist\r\n\t} as const\r\n}\r\n\r\nexport type SetTodolistACType = ReturnType<typeof setTodolistAC>\r\n\r\nexport const setTodolistAC = (todolists: TodolistType[]) => {\r\n\treturn {\r\n\t\ttype: 'SET-TODOLIST',\r\n\t\ttodolists,\r\n\t} as const\r\n}\r\n\r\nexport type ChangeTodolistEntityStatusACType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport const changeTodolistEntityStatusAC = (todolistID: string,entityStatus:RequestStatusType) => {\r\n\treturn {\r\n\t\ttype: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n\t\ttodolistID,\r\n\t\tentityStatus,\r\n\t} as const\r\n}\r\n\r\nexport const setTodolistsTC = () => {\r\n\treturn async (dispatch: any) => {\r\n\t\tdispatch(isLoadAC('loading'))\r\n\t\ttry {\r\n\t\t\tconst {data} = await todolistsAPI.getTodolists()\r\n\t\t\tdispatch(setTodolistAC(data))\r\n\t\t\tdata.forEach(el => dispatch(getTasksTC(el.id)))\r\n\t\t}\r\n\t\tcatch (error){\r\n\t\t\tdispatch(isErrorAC('Authorization has been denied for this request.'))\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tdispatch(isLoadAC('success'))\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const createTodolistTC = (todolistTitle:string) => {\r\n\treturn async (dispatch:Dispatch) => {\r\n\t\tdispatch(isLoadAC('loading'))\r\n\t\ttry {\r\n\t\t\tconst {data} = await todolistsAPI.createTodolist(todolistTitle)\r\n\t\t\tconst {data:{item}, messages,resultCode} = data\r\n\t\t\tif(resultCode === ResultCodeType.OK){\r\n\t\t\t\tdispatch(addTodolistAC(item))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdispatch(isErrorAC(messages[0]))\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tdispatch(isErrorAC('Authorization has been denied for this request.'))\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tdispatch(isLoadAC('success'))\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const deleteTodolistTC = (todolistID:string) => {\r\n\treturn async (dispatch:Dispatch) => {\r\n\t\tdispatch(isLoadAC('loading'))\r\n\t\tdispatch(changeTodolistEntityStatusAC(todolistID,'loading'))\r\n\t\tawait todolistsAPI.deleteTodolist(todolistID)\r\n\t\tdispatch(removeTodolistAC(todolistID));\r\n\t\tdispatch(isLoadAC('success'))\r\n\t}\r\n}\r\n\r\nexport const updateTodolistTC = (title:string,todolistID:string) => {\r\n\treturn async (dispatch:Dispatch) => {\r\n\t\tdispatch(isLoadAC('loading'))\r\n\t\tawait todolistsAPI.updateTodolist(todolistID,title)\r\n\t\tdispatch(changeTodolistTitleAC(title,todolistID))\r\n\t\tdispatch(isLoadAC('success'))\r\n\t}\r\n}\r\n","import {authInitialisationAPI} from \"../ApiTodolists/ApiTodolist\";\r\nimport {FormikType} from \"../components/AuthLogin/AuthLogin\";\r\nimport {isErrorAC, isInitializationAC, isInitializationTC, ResultCodeType} from \"./AppReducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n\tisLoggedIn: false\r\n}\r\n\r\nexport const AuthReducer = (state=initialState, action:AuthReducerHandlerType):InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"AUTH/SET-IS-LOGGED-IN\":\r\n\t\tcase \"AUTH/SET-IS-LOGGED-OUT\":\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t...action.payload\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport type AuthReducerHandlerType = SetIsLoggedInACType | SetIsLoggedOutACType\r\n\r\ntype \tSetIsLoggedInACType = ReturnType<typeof setIsLoggedInAC>\r\n\r\nexport const setIsLoggedInAC = (isLogIn: boolean) => {\r\n\treturn {\r\n\t\ttype: 'AUTH/SET-IS-LOGGED-IN',\r\n\t\tpayload: {\r\n\t\t\tisLogIn\r\n\t\t}\r\n\t} as const\r\n}\r\n\r\ntype \tSetIsLoggedOutACType = ReturnType<typeof setIsLoggedOutAC>\r\n\r\nexport const setIsLoggedOutAC = (isLogIn: boolean) => {\r\n\treturn {\r\n\t\ttype: 'AUTH/SET-IS-LOGGED-OUT',\r\n\t\tpayload: {\r\n\t\t\tisLogIn\r\n\t\t}\r\n\t} as const\r\n}\r\n\r\nexport const isLoggedInTC = (logInForm:FormikType) => {\r\n\treturn async (dispatch:any) => {\r\n\t\tconst {data} = await authInitialisationAPI.logIn(logInForm)\r\n\t\tconst {data:userId,resultCode,messages} = data\r\n\t\tif(resultCode === ResultCodeType.OK){\r\n\t\t\tdispatch(setIsLoggedInAC(true))\r\n\t\t\tdispatch(isInitializationTC())\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdispatch(isErrorAC(messages[0]))\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const isLoggedOutTC = () => {\r\n\treturn async (dispatch:Dispatch) => {\r\n\t\tconst {data} = await authInitialisationAPI.logOut()\r\n\t\tconst {resultCode,messages} = data\r\n\t\tif(resultCode === ResultCodeType.OK){\r\n\t\t\tdispatch(setIsLoggedOutAC(false))\r\n\t\t\tdispatch(isInitializationAC({id:null, email:null,login:null,authMe:false}))\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdispatch(isErrorAC(messages[0]))\r\n\t\t}\r\n\t}\r\n}","import React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport {Avatar} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducersType} from \"../reducerRedux/ReducerRedux\";\r\nimport {isLoggedOutTC} from \"../reducer/AuthReducer\";\r\n\r\n\r\nexport default function MenuAppBar() {\r\n\tconst isAuth = useSelector<rootReducersType,boolean>(state => state.app.dataForm.authMe)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst handleChange = () => {\r\n\t\tdispatch(isLoggedOutTC())\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Box sx={{flexGrow: 1}}>\r\n\t\t\t<FormGroup>\r\n\t\t\t\t<FormControlLabel\r\n\t\t\t\t\tcontrol={\r\n\t\t\t\t\t\t<Switch\r\n\t\t\t\t\t\t\tchecked={isAuth}\r\n\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\taria-label=\"login switch\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel={isAuth ? 'Logout' : 'Login'}\r\n\t\t\t\t/>\r\n\t\t\t</FormGroup>\r\n\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t<Toolbar style={{justifyContent:\"space-between\"}}>\r\n\t\t\t\t\t<div style={{display:\"flex\",alignItems:\"center\"}}>\r\n\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\tsize=\"medium\"\r\n\t\t\t\t\t\t\tedge=\"start\"\r\n\t\t\t\t\t\t\tcolor=\"inherit\"\r\n\t\t\t\t\t\t\taria-label=\"menu\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<MenuIcon/>\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t\t\t\tTodolist\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{isAuth && (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\tsize=\"medium\"\r\n\t\t\t\t\t\t\t\taria-label=\"account of current user\"\r\n\t\t\t\t\t\t\t\taria-controls=\"menu-appbar\"\r\n\t\t\t\t\t\t\t\taria-haspopup=\"true\"\r\n\t\t\t\t\t\t\t\tcolor=\"inherit\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Toolbar>\r\n\t\t\t</AppBar>\r\n\t\t</Box>\r\n\t);\r\n}","import React from \"react\";\r\nimport {Box, LinearProgress} from \"@material-ui/core\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {rootReducersType} from \"../reducerRedux/ReducerRedux\";\r\n\r\nexport const LinearIndeterminate = () => {\r\n\tconst isLoad = useSelector<rootReducersType, 'loading' | 'success'>(state => state.app.status)\r\n\r\n\tconst styleLoad: {} = {\r\n\t\theight: '1px',\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div style={styleLoad}>\r\n\t\t\t{isLoad === 'loading' &&\r\n\t\t\t<Box sx={{width: '100%'}}>\r\n\t\t\t\t<LinearProgress/>\r\n\t\t\t</Box>\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}","import React, {ChangeEvent, KeyboardEvent,useState} from \"react\";\r\nimport {Fab, TextField} from \"@material-ui/core\";\r\nimport {Add} from \"@material-ui/icons\";\r\nimport {RequestStatusType} from \"../reducer/TodoListReducer\";\r\n\r\ntype AddItemFormType = {\r\n  callBack: (title: string) => void\r\n  todolistStatus?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(({callBack,todolistStatus}:AddItemFormType)=>{\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        let newTitle = title.trim();\r\n        if (newTitle !== \"\") {\r\n           callBack(newTitle);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if(error !== null) setError(null);\r\n        if (e.charCode === 13 && todolistStatus === 'idle' ) {\r\n          addTask();\r\n        }\r\n    }\r\n  return (\r\n    <div>\r\n      <TextField value={title}\r\n                 onChange={onChangeHandler}\r\n                 onKeyPress={onKeyPressHandler}\r\n                 error={!!error}\r\n                 label={error ? error : 'Type value'}\r\n      />\r\n      <Fab color=\"secondary\" size=\"small\" onClick={addTask} disabled={todolistStatus === 'loading'}>\r\n        <Add/>\r\n      </Fab>\r\n    </div>\r\n  )\r\n})","import {rootReducersType} from \"../reducerRedux/ReducerRedux\";\r\n\r\n\r\nexport const todolistsState = (state:rootReducersType) => state.todolist\r\n\r\nexport const error = (state:rootReducersType) => state.app.error","import React from \"react\";\r\nimport {Send} from \"@material-ui/icons\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {valueType} from \"../reducer/TodoListReducer\";\r\n\r\ntype ButtonType = {\r\n\tonClick: () => void\r\n\tname:string\r\n\tfilter?:valueType\r\n\tcolor?:string\r\n}\r\n\r\nexport const ButtonBody = React.memo((props:ButtonType) => {\r\n\tconst callback = () => props.onClick();\r\n\tconst changeColorButton = props.name === props.filter ? 'primary' : 'inherit';\r\n\treturn (\r\n\t<Button endIcon={<Send />} variant=\"contained\" color={changeColorButton} onClick={callback}>{props.name}</Button>\r\n\t)\r\n})\r\n","import React, {useState, ChangeEvent, KeyboardEvent} from \"react\";\r\n\r\ntype EditableSpanType = {\r\n\tspanTitle: string\r\n\tcallback: (spanTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({spanTitle, ...props}: EditableSpanType) => {\r\n\tconst [title, setTitle] = useState('')\r\n\tconst [changeTitle, setChangeTitle] = useState(false)\r\n\tconst changeHandler = () => {\r\n\t\tsetChangeTitle(true)\r\n\t\tsetTitle(spanTitle)\r\n\t}\r\n\tconst changeInputHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n\tsetTitle(e.currentTarget.value)\r\n\t}\r\n\tconst activeChangeMode = () => {\r\n\t\tprops.callback(title)\r\n\t\tsetChangeTitle(false)\r\n\t}\r\n\tconst changeInputEnter = (e:KeyboardEvent<HTMLInputElement>) => {\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\tactiveChangeMode()\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\tchangeTitle\r\n\t\t\t? <input value={title} onChange={changeInputHandler} onBlur={activeChangeMode} onKeyPress={changeInputEnter} autoFocus/>\r\n\t\t\t: <span onDoubleClick={changeHandler}>{spanTitle}</span>\r\n\t)\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatus, TaskType, TaskTypeHandler} from \"../reducer/TaskReducer\";\r\n\r\n\r\ntype TasksType = {\r\n\ttask: TaskTypeHandler\r\n\tonClickHandler: (id: string) => void\r\n\tonChangeHandler: (task:TaskType) => void\r\n\tchangeTaskTitleHandler: (task:TaskType) => void\r\n}\r\n\r\n\r\nexport const Tasks = React.memo((props: TasksType) => {\r\n\tconst {task, onClickHandler,onChangeHandler,changeTaskTitleHandler} = props\r\n\r\n\r\n\treturn <li className={task.status === TaskStatus.Completed ? \"is-done\" : \"\"}>\r\n\t\t<input type=\"checkbox\" onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n\t\t\tlet newIsDoneValue = e.currentTarget.checked;\r\n\t\t\tonChangeHandler({...task,status: newIsDoneValue ? TaskStatus.Completed : TaskStatus.New})\r\n\t\t}}\r\n\t\t\t\t\t checked={task.status === TaskStatus.Completed}/>\r\n\t\t<EditableSpan spanTitle={task.title} callback={(title: string) => changeTaskTitleHandler({...task,title})}/>\r\n\t\t<IconButton disabled={task.entityStatus === 'loading'} onClick={() => onClickHandler(task.id)} size=\"small\">\r\n\t\t\t<Delete fontSize=\"small\"/>\r\n\t\t</IconButton>\r\n\t</li>\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {ButtonBody} from \"./components/Button\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {\r\n    createTaskTC,\r\n    deleteTaskTC,\r\n    getTasksTC,\r\n    TaskStatus,\r\n    TaskType,\r\n    TaskTypeHandler,\r\n    updateTaskTC\r\n} from \"./reducer/TaskReducer\";\r\nimport {\r\n    changeTadoListAC,\r\n    deleteTodolistTC,\r\n    TodolistTypeHandler,\r\n    updateTodolistTC,\r\n    valueType\r\n} from \"./reducer/TodoListReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducersType} from \"./reducerRedux/ReducerRedux\";\r\nimport {Tasks} from \"./components/Task\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n}\r\n\r\nexport const Todolist = React.memo(({...props}: PropsType) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const todolist = useSelector<rootReducersType, TodolistTypeHandler>(state => state.todolist.filter(el => el.id === props.id)[0]);\r\n    const tasks = useSelector<rootReducersType, Array<TaskTypeHandler>>(state => state.tasks[props.id]);\r\n\r\n\r\n    let taskForRender = tasks\r\n    if (todolist.filter === 'Active') {\r\n        taskForRender = tasks.filter(t => t.status === TaskStatus.New)\r\n    }\r\n    if (todolist.filter === 'Completed') {\r\n        taskForRender = tasks.filter(t => t.status === TaskStatus.Completed)\r\n    }\r\n\r\n    const removeTask = useCallback((taskId: string, todolistID: string) => {\r\n        dispatch(deleteTaskTC(taskId,todolistID))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback( (title: string, todolistID: string) => {\r\n       dispatch(createTaskTC(title,todolistID))\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: valueType, todolistID: string) => {\r\n        dispatch(changeTadoListAC(value, todolistID));\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback( (title: string, todolistID: string) => {\r\n      dispatch(updateTodolistTC(title,todolistID))\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback( (todolistID: string) => {\r\n       dispatch(deleteTodolistTC(todolistID))\r\n    }, [dispatch])\r\n    const changeTaskTitleHandler = useCallback((task:TaskType) => {\r\n        dispatch(updateTaskTC(task))\r\n    }, [dispatch])\r\n    const onChangeHandler = useCallback((task:TaskType) => {\r\n        dispatch(updateTaskTC(task));\r\n    }, [dispatch])\r\n\r\n    const removeTodolistHandler = useCallback(() => {\r\n        removeTodolist(props.id)\r\n    },[removeTodolist,props.id]);\r\n    const onAllClickHandler = useCallback(() => changeFilter(\"All\", props.id),[changeFilter,props.id]);\r\n    const onActiveClickHandler = useCallback(() => changeFilter(\"Active\", props.id),[changeFilter,props.id]);\r\n    const onCompletedClickHandler = useCallback(() => changeFilter(\"Completed\", props.id),[changeFilter,props.id]);\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, props.id)\r\n    }, [addTask, props.id])\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle(title, props.id)\r\n    }, [changeTodolistTitle, props.id])\r\n    const onClickHandler = useCallback((id: string) => removeTask(id, props.id), [removeTask, props.id])\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan spanTitle={todolist.title} callback={changeTodolistTitleHandler}/>\r\n            <IconButton onClick={removeTodolistHandler} disabled={todolist.entityStatus === 'loading'} size=\"small\">\r\n                <Delete fontSize=\"small\"/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm callBack={addTaskHandler} todolistStatus={todolist.entityStatus}/>\r\n        <ul style={{listStyleType: 'none'}}>\r\n            {taskForRender && taskForRender.map(t => <Tasks\r\n              key={t.id}\r\n              task={t}\r\n              onClickHandler={onClickHandler}\r\n              onChangeHandler={onChangeHandler}\r\n              changeTaskTitleHandler={changeTaskTitleHandler}\r\n            />)}\r\n        </ul>\r\n        <div>\r\n            <ButtonBody onClick={onAllClickHandler} name={'All'} filter={todolist.filter}/>\r\n            <ButtonBody onClick={onActiveClickHandler} name={'Active'} filter={todolist.filter}/>\r\n            <ButtonBody onClick={onCompletedClickHandler} name={'Completed'} filter={todolist.filter}/>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback} from \"react\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {todolistsState} from \"../Selectors/Selectors\";\r\nimport {Todolist} from \"../TodoList\";\r\nimport {createTodolistTC} from \"../reducer/TodoListReducer\";\r\n\r\n\r\nexport const TodolistDemo = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst todolist = useSelector(todolistsState);\r\n\r\n\tconst addTodolist = useCallback( async (todolistTitle: string) => {\r\n\t\tdispatch(createTodolistTC(todolistTitle))\r\n\t},[dispatch])\r\n\r\n\tconst todolistsComponents = todolist.map(tl => {\r\n\t\treturn (\r\n\t\t\t<Grid key={tl.id} item>\r\n\t\t\t\t<Paper elevation={3} style={{padding: '20px'}}>\r\n\t\t\t\t\t<Todolist\r\n\t\t\t\t\t\tkey={tl.id}\r\n\t\t\t\t\t\tid={tl.id}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Paper>\r\n\t\t\t</Grid>\r\n\t\t)\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div className='App'>\r\n\t\t\t<Grid container style={{margin: '50px 0', justifyContent: 'center'}}>\r\n\t\t\t\t<AddItemForm callBack={addTodolist}/>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid container spacing={6}>\r\n\t\t\t\t{todolistsComponents}\r\n\t\t\t</Grid>\r\n\t\t</div>\r\n\t)\r\n}","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {rootReducersType} from \"../../reducerRedux/ReducerRedux\";\r\n\r\ntype PrivateRouterType = {\r\n\tchildren: JSX.Element\r\n}\r\n\r\nexport const PrivateRouter = ({children, ...rest}: PrivateRouterType) => {\r\n\tconst authLogin = useSelector<rootReducersType, boolean>(state => state.app.dataForm.authMe)\r\n\r\n\tif (!authLogin) {\r\n\t\treturn <Navigate to='/login'/>\r\n\t}\r\n\treturn children\r\n}","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FormikErrors, useFormik} from \"formik\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducersType} from \"../../reducerRedux/ReducerRedux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes/Routes\";\r\nimport {isLoggedInTC} from \"../../reducer/AuthReducer\";\r\n\r\nexport type FormikType = {\r\n\temail: string\r\n\tpassword: string\r\n\trememberMe: boolean\r\n}\r\n\r\nexport const AuthLogin = () => {\r\n\tconst dispatch = useDispatch()\r\n\tconst authLogin = useSelector<rootReducersType, boolean>(state => state.app.dataForm.authMe)\r\n\r\n\tconst validate = (values: FormikType) => {\r\n\r\n\t\tconst errors: FormikErrors<FormikType> = {};\r\n\t\tif (!values.email) {\r\n\t\t\terrors.email = 'Required';\r\n\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\terrors.email = 'Invalid email address';\r\n\t\t}\r\n\t\tif (!values.password) {\r\n\t\t\terrors.password = 'Invalid email address';\r\n\t\t}\r\n\t\treturn errors;\r\n\t};\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\trememberMe: false\r\n\t\t},\r\n\t\tvalidate,\r\n\t\tonSubmit: values => {\r\n\t\t\tdispatch(isLoggedInTC(values))\r\n\t\t},\r\n\t})\r\n\r\n\tif(authLogin){\r\n\t\treturn <Navigate to={PATH.TODOLIST}/>\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div style={{display: \"flex\", justifyContent: \"center\",marginTop: \"40px\"}}>\r\n\t\t\t<div>\r\n\t\t\t\t<Paper elevation={3} style={{padding: '20px'}}>\r\n\t\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t<FormLabel>\r\n\t\t\t\t\t\t\t<p>Email: aleksmaifet@gmail.com</p>\r\n\t\t\t\t\t\t\t<p>Password: Free</p>\r\n\t\t\t\t\t\t</FormLabel>\r\n\t\t\t\t\t\t<div style={{display: \"flex\", flexDirection: \"column\", alignItems: \"center\", margin: \"30px 0\"}}>\r\n\t\t\t\t\t\t\t<Avatar style={{backgroundColor: \"red\", marginBottom: \"20px\"}}>\r\n\t\t\t\t\t\t\t\t<LockOutlinedIcon/>\r\n\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t<Typography component=\"h1\" variant=\"h5\">\r\n\t\t\t\t\t\t\t\tSign in\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t<TextField label={formik.errors.email && formik.touched.email ? formik.errors.email : \"Email\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t margin=\"normal\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t error={!!formik.errors.email && !!formik.touched.email}\r\n\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps(\"email\")}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<TextField type=\"password\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t autoComplete=\"on\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t label={formik.errors.password && formik.touched.password ? formik.errors.password : \"Password\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t margin=\"normal\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t error={!!formik.errors.password && !!formik.touched.password}\r\n\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps(\"password\")}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\t\tstyle={{margin: \"20px 0\"}}\r\n\t\t\t\t\t\t\t\tlabel={\"Remember me\"}\r\n\t\t\t\t\t\t\t\tcontrol={<Checkbox/>}\r\n\t\t\t\t\t\t\t\t{...formik.getFieldProps(\"rememberMe\")}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\ttype={\"submit\"}\r\n\t\t\t\t\t\t\t\tvariant={\"contained\"}\r\n\t\t\t\t\t\t\t\tcolor={\"primary\"}>\r\n\t\t\t\t\t\t\t\tLogin\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t</FormControl>\r\n\t\t\t\t</form>\r\n\t\t\t\t</Paper>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from \"react\";\r\nimport {Navigate,Routes, Route} from \"react-router-dom\";\r\nimport {TodolistDemo} from \"../TodolistDemo\";\r\nimport {PrivateRouter} from \"./PrivateRouter\";\r\nimport {AuthLogin} from \"../AuthLogin/AuthLogin\";\r\n\r\n\r\nexport const PATH = {\r\n\tTODOLIST:'/Todolist',\r\n\tLOGIN:'/login',\r\n}\r\n\r\n\r\nexport const RoutesBlock = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Routes>\r\n\t\t\t\t<Route path={'/'} element={<AuthLogin/>}/>\r\n\t\t\t\t<Route path={'/Todolist'} element={\r\n\t\t\t\t\t<PrivateRouter>\r\n\t\t\t\t\t\t<TodolistDemo/>\r\n\t\t\t\t\t</PrivateRouter>\r\n\t\t\t\t}/>\r\n\t\t\t\t<Route path={PATH.TODOLIST} element={<TodolistDemo/>}/>\r\n\t\t\t\t<Route path={PATH.LOGIN} element={<AuthLogin/>}/>\r\n\t\t\t</Routes>\r\n\t\t</div>\r\n\t)\r\n}","import React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {isErrorAC} from \"../reducer/AppReducer\";\r\nimport {Snackbar} from \"@material-ui/core\";\r\nimport {Alert} from \"@material-ui/lab\";\r\n\r\n\r\ntype ErrorAlertType = {\r\n\terrorStatus:string | null\r\n}\r\n\r\n\r\nexport const ErrorAlert = React.memo(({errorStatus}:ErrorAlertType) => {\r\n\tconst dispatch = useDispatch()\r\n\tconst styleAlert = {\r\n\t\tbackgroundColor:'red'\r\n\t}\r\n\tconst isOpen = errorStatus != null\r\n\tconst handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n\t\tif (reason === 'clickaway') {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tdispatch(isErrorAC(null))\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n\t\t\t\t<Alert style={styleAlert} onClose={handleClose} variant=\"filled\" severity=\"error\">\r\n\t\t\t\t\t{errorStatus} 😠\r\n\t\t\t\t</Alert>\r\n\t\t\t</Snackbar>\r\n\t\t</>\r\n\t)\r\n})","import CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n\r\nexport const IsLoad = () => {\r\n\tconst CircularStyle = {\r\n\t\tminHeight:\"100vh\",\r\n\t\tdisplay: \"flex\",\r\n\t\tjustifyContent:\"center\",\r\n\t\talignItems:\"center\",\r\n\t}\r\n\r\n\treturn (\r\n\t<div style={CircularStyle}>\r\n\t\t<CircularProgress color=\"primary\"/>\r\n\t</div>\r\n\t)\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {Container} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport MenuAppBar from \"./components/AppBar\";\r\nimport {LinearIndeterminate} from \"./components/LinearProgress\";\r\nimport {RoutesBlock} from './components/Routes/Routes';\r\nimport {isInitializationTC} from \"./reducer/AppReducer\";\r\nimport {ErrorAlert} from \"./components/ErrorAlert\";\r\nimport {error} from \"./Selectors/Selectors\";\r\nimport {IsLoad} from \"./components/Load/Load\";\r\nimport {rootReducersType} from \"./reducerRedux/ReducerRedux\";\r\n\r\n\r\nfunction App() {\r\n\tconst isSpinner = useSelector<rootReducersType, boolean>(state => state.app.spinner)\r\n\tconst dispatch = useDispatch();\r\n\tconst errorStatus = useSelector(error)\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(isInitializationTC())\r\n\t},[dispatch])\r\n\r\n\tif (isSpinner) {\r\n\t\treturn <IsLoad/>\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Container fixed>\r\n\t\t\t<MenuAppBar/>\r\n\t\t\t<LinearIndeterminate/>\r\n\t\t\t<RoutesBlock/>\r\n\t\t\t<ErrorAlert errorStatus={errorStatus}/>\r\n\t\t</Container>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {TodoListReducer} from \"../reducer/TodoListReducer\";\r\nimport {TaskReducer} from \"../reducer/TaskReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {AppReducer} from \"../reducer/AppReducer\";\r\nimport {AuthReducer} from \"../reducer/AuthReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers ({\r\n\ttodolist: TodoListReducer,\r\n\ttasks: TaskReducer,\r\n\tapp: AppReducer,\r\n\tauth: AuthReducer,\r\n})\r\n\r\n\r\n\r\nexport type rootReducersType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk));\r\n\r\n\r\n//@ts-ignore\r\nwindow.store=store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./reducerRedux/ReducerRedux\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n\t<BrowserRouter>\r\n\t\t<Provider store={store}>\r\n\t\t\t<App/>\r\n\t\t</Provider>\r\n\t</BrowserRouter>,\r\n\tdocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}